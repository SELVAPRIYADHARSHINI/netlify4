import React, { useState, useEffect } from 'react';
import './feed.css';
import axios from 'axios';
import { useNavigate } from 'react-router-dom'; 

function Feed() {
  const navigate = useNavigate(); 
  const [parentName, setParentName] = useState('');
  const [startTime, setStartTime] = useState('');
  const [stopTime, setStopTime] = useState('');
  const [breastSide, setBreastSide] = useState('');
  const [supplement, setSupplement] = useState('');
  const [painLevel, setPainLevel] = useState(0);
  const [nippleShape, setNippleShape] = useState('');
  const [nippleColor, setNippleColor] = useState('');
  const [milkBlister, setMilkBlister] = useState(false);
  const [nippleCracks, setNippleCracks] = useState(false);
  const [feelings, setFeelings] = useState('');

  useEffect(() => {
    const storedParentName = localStorage.getItem('parentName');
    if (storedParentName) {
      setParentName(storedParentName);
    }
  }, []);

  const handleParentNameChange = (event) => {
    const newName = event.target.value;
    setParentName(newName);
    localStorage.setItem('parentName', newName);
  };

  const AddProductInfo = async () => {
    try {
      const response = await axios.post('http://127.0.0.1:8000/api/breastfeed-detail/', {
        parentName,
        startTime,
        stopTime,
        breastSide,
        supplement,
        painLevel,
        nippleShape,
        nippleColor,
        milkBlister,
        nippleCracks,
        feelings,
      });
      console.log(response.data);
      navigate('/');
    } catch (error) {
      console.error('Error:', error);
    }
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    console.log(parentName, startTime, stopTime, breastSide, supplement, painLevel, nippleShape, nippleColor, milkBlister, nippleCracks, feelings);
    setParentName('');
    setStartTime('');
    setStopTime('');
    setBreastSide('');
    setSupplement('');
    setPainLevel(0);
    setNippleShape('');
    setNippleColor('');
    setMilkBlister(false);
    setNippleCracks(false);
    setFeelings('');
  };

  return (
    <div>
      <div className='headingfeed'>
    
      <h2>родро╛ропрпНрокрпНрокро╛ро▓рпН роХрпКроЯрпБроХрпНроХрпБроорпН ро╡ро┐рокро░роЩрпНроХро│рпН</h2>
    
    
      </div>
      <form onSubmit={handleSubmit}>
        
        <div>
          <label htmlFor="parentName">рокрпЖро▒рпНро▒рпЛро░рпН рокрпЖропро░рпН:</label>
          <input type="text" id="parentName" value={parentName} onChange={handleParentNameChange} />
        </div>
        <div>
          <label htmlFor="startTime">родрпКроЯроХрпНроХ роирпЗро░роорпН:</label>
          <input type="time" id="startTime" value={startTime} onChange={(e) => setStartTime(e.target.value)} />
        </div>
        <div>
          <label htmlFor="stopTime">роиро┐ро▒рпБродрпНрод роирпЗро░роорпН:</label>
          <input type="time" id="stopTime" value={stopTime} onChange={(e) => setStopTime(e.target.value)} />
        </div>
        <div>
          <label htmlFor="breastSide">роХрпБро┤роирпНродрпИ рокро╛ро▓рпВроЯрпНроЯ роОроирпНрод рооро╛ро░рпНрокроХродрпНродрпИрокрпН рокропройрпНрокроЯрпБродрпНродро┐ройрпАро░рпНроХро│рпН?</label>
          <select id="breastSide" value={breastSide} onChange={(e) => setBreastSide(e.target.value)}>
            <option value="">родрпЗро░рпНроирпНродрпЖроЯрпБ </option>
            <option value="left">роЗроЯродрпБ</option>
            <option value="right">ро╡ро▓родрпБ</option>
            <option value="both">роЗро░рогрпНроЯрпБроорпН</option>
          </select>
        </div>
        <div>
          <label htmlFor="supplement">роЙроЩрпНроХро│рпН роХрпБро┤роирпНродрпИроХрпНроХрпБ роОрокрпНрокроЯро┐ рокро╛ро▓рпН роХрпКроЯрпБродрпНродрпАро░рпНроХро│рпН?</label>
          <select id="supplement" value={supplement} onChange={(e) => setSupplement(e.target.value)}>
            <option value="">родрпЗро░рпНроирпНродрпЖроЯрпБ </option>
            <option value="breastmilk">родро╛ропрпНрокрпНрокро╛ро▓рпНЁЯд▒ЁЯП╗</option>
            <option value="formula">роГрокро╛ро░рпНроорпБро▓ро╛ ЁЯН╝</option>
          </select>
        </div>
        <div>
          <label htmlFor="painLevel">родро╛ропрпНрокрпНрокро╛ро▓рпН роХрпКроЯрпБроХрпНроХрпБроорпН рокрпЛродрпБ роПродрпЗройрпБроорпН ро╡ро▓ро┐ропрпИ роЙрогро░рпНроирпНродрпАро░рпНроХро│ро╛?</label>
          <input type="range" id="painLevel" min="0" max="10" value={painLevel} onChange={(e) => setPainLevel(parseInt(e.target.value))} />
          <span>{painLevel} ({painLevel === 0 ? 'ро╡ро▓ро┐ роЗро▓рпНро▓рпИ' : painLevel >= 1 && painLevel <= 3 ? 'роХрпБро▒рпИроирпНрод ро╡ро▓ро┐' : painLevel >= 4 && painLevel <= 6 ? 'роироЯрпБродрпНродро░ ро╡ро▓ро┐' : 'роЕродро┐роХ ро╡ро▓ро┐'})</span>
        </div>
        <div>
          <label htmlFor="nippleShape">роорпБро▓рпИроХрпНроХро╛роорпНрокро┐ройрпН ро╡роЯро┐ро╡роорпН роОройрпНрой?</label>
          <select id="nippleShape" value={nippleShape} onChange={(e) => setNippleShape(e.target.value)}>
            <option value="">родрпЗро░рпНроирпНродрпЖроЯрпБ </option>
            <option value="rounded">ро╡роЯрпНроЯ ро╡роЯро┐ро╡ роорпБро▓рпИроХрпНроХро╛роорпНрокрпБ</option>
            <option value="lipstick">ро▓ро┐рокрпНро╕рпНроЯро┐роХрпН ро╡роЯро┐ро╡ роорпБро▓рпИроХрпНроХро╛роорпНрокрпБ</option>
          </select>
        </div>
        <div>
          <label htmlFor="nippleColor">роорпБро▓рпИроХрпНроХро╛роорпНрокро┐ройрпН роиро┐ро▒роорпН роОройрпНрой?</label>
          <select id="nippleColor" value={nippleColor} onChange={(e) => setNippleColor(e.target.value)}>
            <option value="">родрпЗро░рпНроирпНродрпЖроЯрпБ </option>
            <option value="regular">ро╡ро┤роХрпНроХрооро╛рой роиро┐ро▒роорпН</option>
            <option value="white">ро╡рпЖро│рпНро│рпИ роиро┐ро▒роорпН</option>
            <option value="purple">роКродро╛ роиро┐ро▒роорпН</option>
          </select>
        </div>
        <div>
          <label htmlFor="milkBlister">роЙроЩрпНроХро│рпН рооро╛ро░рпНрокроХроЩрпНроХро│ро┐ро▓рпН рокро╛ро▓рпН роХрпКрокрпНрокрпБро│роорпН роЗро░рпБроХрпНроХро┐ро▒родро╛?</label>
          <select id="milkBlister" value={milkBlister} onChange={(e) => setMilkBlister(e.target.value === 'true')}>
            <option value={false}>роЗро▓рпНро▓рпИ</option>
            <option value={true}>роЖроорпН</option>
          </select>
        </div>
        <div>
          <label htmlFor="nippleCracks">роЙроЩрпНроХро│рпН роорпБро▓рпИроХрпНроХро╛роорпНрокрпБроХро│ро┐ро▓рпН роПродрпЗройрпБроорпН ро╡ро┐ро░ро┐роЪро▓рпН роЗро░рпБроХрпНроХро┐ро▒родро╛?</label>
          <select id="nippleCracks" value={nippleCracks} onChange={(e) => setNippleCracks(e.target.value === 'true')}>
            <option value={false}>роЗро▓рпНро▓рпИ</option>
            <option value={true}>роЖроорпН</option>
          </select>
        </div>
        <div>
          <label htmlFor="feelings">роирпАроЩрпНроХро│рпН роОрокрпНрокроЯро┐ роЙрогро░рпБроХро┐ро▒рпАро░рпНроХро│рпН?</label>
          <select id="feelings" value={feelings} onChange={(e) => setFeelings(e.target.value)}>
            <option value="">родрпЗро░рпНроирпНродрпЖроЯрпБ </option>
            <option value="relaxed">роиро┐роорпНроородро┐ропро╛роХЁЯШЗ</option>
            <option value="happy">роороХро┐ро┤рпНроЪрпНроЪро┐ропро╛рой роЙрогро░рпНро╡рпБЁЯША</option>
            <option value="sad">роЪрпЛроХ роЙрогро░рпНро╡рпБЁЯШФ</option>
            <option value="exhausted">родрпАро░рпНроирпНродрпБ рокрпЛрой роЙрогро░рпНро╡рпБЁЯдп</option>
            <option value="anxious">роХро╡ро▓рпИ роЙрогро░рпНро╡рпБЁЯШ░</option>
          </select>
        </div>
        <button type="submit" onClick={AddProductInfo}>роЪро░ро┐</button>
      </form>
    </div>




  );
}

export default Feed;
